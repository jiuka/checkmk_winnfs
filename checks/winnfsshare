#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# winnfsshare - Windows NFS Share check
#
# Copyright (C) 2020  Marius Rieder <marius.rieder@scs.ch>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


factory_settings['winnfsshare_default_levels'] = {
    'Online': True,
}

def parse_winnfsshare(info):
    parsed = {}

    keys = info.pop(0)[1:]

    for line in info:
        name = line.pop(0)
        parsed[name] = dict(zip(keys, line))
        parsed[name]['Authentication'] = parsed[name]['Authentication'].split(',')

    return parsed


def inventory_winnfsshare(parsed):
    for key in parsed.keys():
        params = {'discovered': {
            'Authentication': parsed[key]['Authentication'],
            'AnonymousAccess': parsed[key]['AnonymousAccess'],
            'UnmappedUserAccess': parsed[key]['UnmappedUserAccess'],
        }}
        yield key, params

def check_winnfsshare(item, params, parsed):
    if item not in parsed:
        yield 2, "Share not found"
        return

    parsed = parsed[item]

    if params['Online'] == 'ignored':
        yield 0, parsed['Online']
    elif params['Online'] == parsed['Online']:
        yield 0, parsed['Online']
    else:
        yield 2, "%s (expected: %s)" % (parsed['Online'], params['Online'])

    if 'Authentication' in params:
        yield 0, "Authentication:",
        for methode, state in params['Authentication'].items():
            if state == 'ignored':
                continue
            if state == 'forbidden':
                if methode in parsed['Authentication']:
                    yield 1, "Not expected %s" % methode
            elif state == 'required':
                if methode in parsed['Authentication']:
                    yield 0, methode
                else:
                    yield 1, "Expected %s" % methode
            else:
                if methode in parsed['Authentication'] and methode in params['discovered']['Authentication']:
                    yield 0, methode
                elif methode in parsed['Authentication']:
                    yield 1, "Not expected %s" % methode
                else:
                    yield 1, "Expected %s" % methode

    if 'AnonymousAccess' in params:
        if params['AnonymousAccess'] == 'ignored':
            pass
        if params['AnonymousAccess'] == 'discoverd':
            params['AnonymousAccess'] = params['discovered']['AnonymousAccess']

        state = 0
        if parsed['AnonymousAccess'] != params['AnonymousAccess']:
            state = 1

        if parsed['AnonymousAccess'] == 'True':
            yield state, 'Anonymous Access allowed'
        else:
            yield state, 'Anonymous Access not allowed'

    if "UnmappedUserAccess" in params:
        if params['UnmappedUserAccess'] == 'ignored':
            pass
        if params['UnmappedUserAccess'] == 'discoverd':
            params['UnmappedUserAccess'] = params['discovered']['UnmappedUserAccess']

        state = 0
        if parsed['UnmappedUserAccess'] != params['UnmappedUserAccess']:
            state = 1

        if parsed['UnmappedUserAccess'] == 'True':
            yield state, 'Unmapped User Access allowed'
        else:                  
            yield state, 'Unmapped User not allowed'

check_info['winnfsshare'] = {
  'parse_function'     : parse_winnfsshare,
  'inventory_function' : inventory_winnfsshare,
  'check_function'     : check_winnfsshare,
  'service_description': 'NFS Share /%s',
  'group': 'winnfsshare',
  'default_levels_variable': 'winnfsshare_default_levels',
}
